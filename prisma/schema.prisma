// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model TherapistSnippet {
  id           Int      @id @default(autoincrement())
  name         String
  location     String
  phoneNumbers String[]
  links        String[]

  @@unique([name, location])
}

model Therapist {
  id           Int       @id @default(autoincrement())
  name         String    @unique
  locations    String[]
  phoneNumbers String[]
  languages    String[]
  orientations String[]
  therapies    Therapy[]
  email        String?
  homepage     String?
  dateAdded    DateTime  @default(now())
  lastActive   DateTime?
  isActive     Boolean   @default(false)

  @@index([name])
}

model Therapy {
  id          Int        @id @default(autoincrement())
  muoto       String
  lajit       String[]
  Therapist   Therapist? @relation(fields: [therapistId], references: [id], onDelete: Cascade)
  therapistId Int?
}

enum Suuntaus {
  PSYKOANALYYTTINEN
  GESTALT                  @map("gestalt-terapia")
  INTEGROIVA
  KOGNITIIVIS_ANALYYTTINEN @map("kognitiivis-analyyttinen")
  KOGNITIIVINEN
  KRIISI_TRAUMA            @map("kriisi- ja traumaterapia")
  MUSIIKKI                 @map("musiikkiterapia")
  NEPSY                    @map("neuropsykologiset häiriöt")
  PARI                     @map("paripsykoterapia")
  PERHE                    @map("perheterapia")
  PSYKODYNAAMINEN
  RATKAISUKESKEINEN
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
